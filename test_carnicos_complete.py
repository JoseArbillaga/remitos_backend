#!/usr/bin/env python3
"""
Script de prueba completo para automatizaci√≥n de remitos c√°rnicos
Demuestra la extracci√≥n autom√°tica de datos AFIP para remitos del sector c√°rnico
"""

import requests
import json
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://127.0.0.1:8000/api/v1"
TEST_CUIT = "24238783522"  # CUIT proporcionado
TEST_PASSWORD = "Ignacio2024"  # Clave proporcionada
TEST_USERNAME = "carnico_user"
TEST_EMAIL = "carnico@sgpatagon25.com"

class RemitoCarnicoTester:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.base_url = BASE_URL
        
    def print_response(self, response, title):
        """Imprime la respuesta de manera formateada"""
        print(f"\n{'='*80}")
        print(f"üîç {title}")
        print(f"{'='*80}")
        print(f"Status Code: {response.status_code}")
        try:
            json_data = response.json()
            print(f"Response: {json.dumps(json_data, indent=2, ensure_ascii=False)}")
        except:
            print(f"Response Text: {response.text}")
        print(f"{'='*80}")
        
    def setup_user(self):
        """Configura usuario para pruebas c√°rnicas"""
        print(f"\nüë§ Configurando usuario para pruebas c√°rnicas...")
        
        # Registro
        user_data = {
            "username": TEST_USERNAME,
            "email": TEST_EMAIL,
            "password": TEST_PASSWORD,
            "cuit": TEST_CUIT,
            "full_name": "Usuario Remitos C√°rnicos - Sgpatagon25",
            "role": "admin"
        }
        
        response = self.session.post(f"{self.base_url}/auth/register", json=user_data)
        if response.status_code in [200, 201]:
            print("‚úÖ Usuario registrado exitosamente")
        elif "already exists" in response.text:
            print("‚ÑπÔ∏è Usuario ya existe")
        
        # Login
        login_data = {"username": TEST_USERNAME, "password": TEST_PASSWORD}
        response = self.session.post(f"{self.base_url}/auth/login", data=login_data)
        
        if response.status_code == 200:
            token_data = response.json()
            self.token = token_data.get("access_token")
            self.session.headers.update({"Authorization": f"Bearer {self.token}"})
            print("‚úÖ Login exitoso - Listo para pruebas c√°rnicas")
            return True
        else:
            print(f"‚ùå Error en login: {response.status_code}")
            return False
    
    def test_estado_sistema_carnico(self):
        """Prueba el estado del sistema c√°rnico"""
        print("\nü•© Probando estado del sistema c√°rnico...")
        response = self.session.get(f"{self.base_url}/afip/carnicos/")
        self.print_response(response, "Estado Sistema C√°rnico")
        return response.status_code == 200
    
    def test_establecimientos_carnicos(self, cuit=TEST_CUIT):
        """Prueba obtenci√≥n de establecimientos c√°rnicos"""
        print(f"\nüè≠ Obteniendo establecimientos c√°rnicos para CUIT: {cuit}")
        response = self.session.get(f"{self.base_url}/afip/carnicos/establecimientos/{cuit}")
        self.print_response(response, f"Establecimientos C√°rnicos - CUIT {cuit}")
        
        if response.status_code == 200:
            data = response.json()
            establecimientos = data.get("establecimientos", {}).get("establecimientos", [])
            print(f"üìä Resumen establecimientos:")
            for est in establecimientos:
                print(f"   ‚Ä¢ {est['numero_senasa']}: {est['nombre']} ({est['tipo']})")
        
        return response.status_code == 200
    
    def test_catalogo_productos_carnicos(self):
        """Prueba obtenci√≥n del cat√°logo de productos c√°rnicos"""
        print("\nüìã Obteniendo cat√°logo de productos c√°rnicos...")
        response = self.session.get(f"{self.base_url}/afip/carnicos/productos")
        self.print_response(response, "Cat√°logo Productos C√°rnicos")
        
        if response.status_code == 200:
            data = response.json()
            categorias = data.get("catalogo", {}).get("categorias", {})
            print(f"üìä Resumen cat√°logo:")
            for cat_name, cat_data in categorias.items():
                print(f"   ‚Ä¢ {cat_name}: {len(cat_data['productos'])} productos")
        
        return response.status_code == 200
    
    def test_trazabilidad_carnica(self, cuit=TEST_CUIT):
        """Prueba obtenci√≥n de trazabilidad c√°rnica"""
        print(f"\nüîó Obteniendo trazabilidad c√°rnica para CUIT: {cuit}")
        response = self.session.get(f"{self.base_url}/afip/carnicos/trazabilidad/{cuit}")
        self.print_response(response, f"Trazabilidad C√°rnica - CUIT {cuit}")
        
        if response.status_code == 200:
            data = response.json()
            trazabilidad = data.get("trazabilidad", {})
            sistemas = trazabilidad.get("sistemas_trazabilidad", {})
            print(f"üìä Resumen trazabilidad:")
            for sistema, info in sistemas.items():
                if info.get("activo"):
                    print(f"   ‚Ä¢ {sistema}: {info['animales_registrados']} animales")
        
        return response.status_code == 200
    
    def test_remito_automatico(self):
        """Prueba generaci√≥n autom√°tica de remito c√°rnico"""
        print("\nüìÑ Generando remito c√°rnico autom√°tico...")
        
        remito_data = {
            "cuit_origen": TEST_CUIT,
            "cuit_destino": "30999999995",  # CUIT destino de prueba
            "productos": [
                {
                    "descripcion": "Carne bovina fresca - Cuartos delanteros",
                    "cantidad": 100,
                    "peso_unitario": 25.0,
                    "precio_unitario": 150.0,
                    "tipo_producto": "FRESCO"
                },
                {
                    "descripcion": "Chorizo fresco artesanal",
                    "cantidad": 50,
                    "peso_unitario": 0.5,
                    "precio_unitario": 80.0,
                    "tipo_producto": "ELABORADO"
                },
                {
                    "descripcion": "Carne porcina - Cortes especiales",
                    "cantidad": 75,
                    "peso_unitario": 2.0,
                    "precio_unitario": 120.0,
                    "tipo_producto": "FRESCO"
                }
            ],
            "observaciones": "Remito autom√°tico generado desde AFIP - Certificado sgpatagon25",
            "transporte": {
                "empresa": "Transporte Frigor√≠fico SRL",
                "chofer": "Juan Carlos Transportista",
                "vehiculo": "Cami√≥n refrigerado - ABC123"
            }
        }
        
        response = self.session.post(
            f"{self.base_url}/afip/carnicos/remito-automatico",
            json=remito_data,
            params={"incluir_trazabilidad": True}
        )
        
        self.print_response(response, "Remito C√°rnico Autom√°tico")
        
        if response.status_code == 200:
            data = response.json()
            remito = data.get("remito_carnico", {})
            print(f"""
üìä REMITO GENERADO AUTOM√ÅTICAMENTE:
===================================
N√∫mero: {remito.get('numero_remito')}
Origen: {remito.get('emisor', {}).get('cuit')} - {remito.get('emisor', {}).get('datos_afip', {}).get('denominacion')}
Destino: {remito.get('destinatario', {}).get('cuit')} - {remito.get('destinatario', {}).get('datos_afip', {}).get('denominacion')}
Productos: {len(remito.get('productos', []))}
Peso Total: {remito.get('totales', {}).get('peso_total_kg', 0)} kg
Valor Total: ${remito.get('totales', {}).get('valor_total', 0):.2f}
Establecimiento Origen: {remito.get('emisor', {}).get('establecimiento', {}).get('numero_senasa')}
Establecimiento Destino: {remito.get('destinatario', {}).get('establecimiento', {}).get('numero_senasa')}
Trazabilidad: {remito.get('trazabilidad', {}).get('codigo_trazabilidad')}
===================================
""")
        
        return response.status_code == 200
    
    def test_batch_remitos(self):
        """Prueba generaci√≥n en lote de remitos c√°rnicos"""
        print("\nüì¶ Probando generaci√≥n batch de remitos c√°rnicos...")
        
        batch_data = [
            {
                "cuit_origen": TEST_CUIT,
                "cuit_destino": "30111111119",
                "productos": [
                    {
                        "descripcion": "Carne bovina deshuesada",
                        "cantidad": 50,
                        "peso_unitario": 1.0,
                        "precio_unitario": 180.0,
                        "tipo_producto": "FRESCO"
                    }
                ]
            },
            {
                "cuit_origen": TEST_CUIT,
                "cuit_destino": "30222222228",
                "productos": [
                    {
                        "descripcion": "Salame artesanal",
                        "cantidad": 30,
                        "peso_unitario": 0.3,
                        "precio_unitario": 200.0,
                        "tipo_producto": "ELABORADO"
                    }
                ]
            }
        ]
        
        response = self.session.post(
            f"{self.base_url}/afip/carnicos/batch-remitos",
            json=batch_data
        )
        
        self.print_response(response, "Batch Remitos C√°rnicos")
        
        if response.status_code == 200:
            data = response.json()
            print(f"üìä Batch completado: {data.get('exitosos')}/{data.get('total_solicitados')} remitos generados")
        
        return response.status_code == 200
    
    def test_validacion_establecimiento(self, cuit=TEST_CUIT):
        """Prueba validaci√≥n de establecimiento c√°rnico"""
        print(f"\n‚úÖ Validando establecimiento c√°rnico para CUIT: {cuit}")
        response = self.session.get(f"{self.base_url}/afip/carnicos/validaciones/establecimiento/{cuit}")
        self.print_response(response, f"Validaci√≥n Establecimiento - CUIT {cuit}")
        
        if response.status_code == 200:
            data = response.json()
            validacion = data.get("validacion", {})
            print(f"""
üìä VALIDACI√ìN ESTABLECIMIENTO:
==============================
CUIT: {validacion.get('cuit')}
Total Establecimientos: {validacion.get('total_establecimientos')}
Establecimientos Habilitados: {validacion.get('establecimientos_habilitados')}
V√°lido: {'‚úÖ S√ç' if validacion.get('valido') else '‚ùå NO'}
==============================
""")
        
        return response.status_code == 200

    def run_demo_completo_carnicos(self):
        """Ejecuta demostraci√≥n completa de automatizaci√≥n c√°rnica"""
        print(f"""
ü•© DEMO COMPLETO: AUTOMATIZACI√ìN REMITOS C√ÅRNICOS
==================================================
Certificado AFIP: sgpatagon25_23ad6985d1bcb772
CUIT Empresa: {TEST_CUIT}
Sistema: Extracci√≥n autom√°tica AFIP ‚Üí Remitos c√°rnicos
Integraci√≥n: SENASA + Trazabilidad + AFIP
==================================================
""")
        
        results = {}
        
        # 1. Setup usuario
        if not self.setup_user():
            print("‚ùå No se puede continuar sin autenticaci√≥n")
            return
        
        # 2. Estado sistema c√°rnico
        results['sistema_carnico'] = self.test_estado_sistema_carnico()
        
        # 3. Establecimientos c√°rnicos
        results['establecimientos'] = self.test_establecimientos_carnicos()
        
        # 4. Cat√°logo productos
        results['catalogo_productos'] = self.test_catalogo_productos_carnicos()
        
        # 5. Trazabilidad
        results['trazabilidad'] = self.test_trazabilidad_carnica()
        
        # 6. Validaci√≥n establecimiento
        results['validacion_establecimiento'] = self.test_validacion_establecimiento()
        
        # 7. Remito autom√°tico
        results['remito_automatico'] = self.test_remito_automatico()
        
        # 8. Batch remitos
        results['batch_remitos'] = self.test_batch_remitos()
        
        # Resumen final
        exitosos = sum(1 for v in results.values() if v)
        total = len(results)
        
        print(f"""
üìä RESUMEN DEMO AUTOMATIZACI√ìN C√ÅRNICA
=======================================
Sistema C√°rnico: {'‚úÖ OK' if results.get('sistema_carnico') else '‚ùå FAIL'}
Establecimientos: {'‚úÖ OK' if results.get('establecimientos') else '‚ùå FAIL'}
Cat√°logo Productos: {'‚úÖ OK' if results.get('catalogo_productos') else '‚ùå FAIL'}
Trazabilidad: {'‚úÖ OK' if results.get('trazabilidad') else '‚ùå FAIL'}
Validaci√≥n Establec.: {'‚úÖ OK' if results.get('validacion_establecimiento') else '‚ùå FAIL'}
Remito Autom√°tico: {'‚úÖ OK' if results.get('remito_automatico') else '‚ùå FAIL'}
Batch Remitos: {'‚úÖ OK' if results.get('batch_remitos') else '‚ùå FAIL'}
=======================================
Pruebas exitosas: {exitosos}/{total}

üéØ AUTOMATIZACI√ìN C√ÅRNICA: {'üü¢ FUNCIONANDO' if exitosos >= 6 else 'üî¥ REQUIERE REVISI√ìN'}

üîó ENDPOINTS C√ÅRNICOS DISPONIBLES:
‚Ä¢ GET /api/v1/afip/carnicos/ - Estado sistema
‚Ä¢ GET /api/v1/afip/carnicos/establecimientos/{{cuit}} - Establecimientos
‚Ä¢ GET /api/v1/afip/carnicos/productos - Cat√°logo productos
‚Ä¢ GET /api/v1/afip/carnicos/trazabilidad/{{cuit}} - Trazabilidad
‚Ä¢ POST /api/v1/afip/carnicos/remito-automatico - Remito autom√°tico
‚Ä¢ POST /api/v1/afip/carnicos/batch-remitos - Remitos en lote
‚Ä¢ GET /api/v1/afip/carnicos/validaciones/establecimiento/{{cuit}} - Validaciones

üè≠ AUTOMATIZACI√ìN COMPLETA:
1. Extraer datos AFIP/SENASA para CUIT empresa
2. Obtener establecimientos c√°rnicos habilitados
3. Cargar cat√°logo productos con c√≥digos oficiales
4. Incluir trazabilidad (SNIG/SIGP)
5. Generar remito autom√°ticamente con toda la informaci√≥n regulatoria
6. Validar cumplimiento normativo sector c√°rnico

‚úÖ Sistema listo para automatizar creaci√≥n de remitos c√°rnicos desde datos AFIP!
ü•© Certificado sgpatagon25 operativo para sector c√°rnico argentino
""")

if __name__ == "__main__":
    tester = RemitoCarnicoTester()
    tester.run_demo_completo_carnicos()